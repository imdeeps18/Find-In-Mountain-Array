
Find Mountain in the array
(Leetcode Hard).






class Solution {
    static int findPeak(MountainArray mountainArr) {
        int start = 0, end = mountainArr.length() - 1;
        int val2=-1,val3=-1;
        while(start<=end) {
            int mid = start + (end - start)/2;
            int val1 = mountainArr.get(mid);
            if(mid < mountainArr.length()-1)
                val2 = mountainArr.get(mid+1);
            if(mid>0)
                val3 = mountainArr.get(mid-1);
            
            if(mid>0 && mid < mountainArr.length()-1 && val1>val2 && val1>val3)
                return mid;
            else if(mid < mountainArr.length()-1 && val1<val2)
                start = mid + 1;
            else
                end = mid - 1;
        }
        
        return -1;
        
    }
    static int leftArray(MountainArray mountainArr, int target, int start, int end) {
        while(start<=end) {
            int mid = start + (end - start)/2;
            int val1 = mountainArr.get(mid);
            if(val1==target)
                return mid;
            else if(val1<target)
                start = mid+1;
            else
                end = mid-1;
        }
        return -1;
    }
    
     static int rightArray(MountainArray mountainArr, int target, int start, int end) {
        while(start<=end) {
            int mid = start + (end - start)/2;
            int val1 = mountainArr.get(mid);
            if(val1==target)
                return mid;
            else if(val1>target)
                start = mid+1;
            else
                end = mid-1;
        }
        return -1;
    }
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int peak = findPeak(mountainArr);
        int left = -1,right = -1;
        left = leftArray(mountainArr,target,0,peak);
        if(left!=-1)
            return left;
        else
            right = rightArray(mountainArr,target,peak+1,mountainArr.length()-1);
        return right;
    }
}